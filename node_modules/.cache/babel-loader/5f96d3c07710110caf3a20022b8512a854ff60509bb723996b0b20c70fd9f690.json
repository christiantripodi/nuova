{"ast":null,"code":"var _jsxFileName = \"/Users/christiantripodi/Documents/Courses/Epicode/Front End/Epicode/s10-esame/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport WeatherInput from './components/WeatherInput';\nimport CurrentWeather from './components/CurrentWeather';\nimport Forecast from './components/Forecast';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [searchedCities, setSearchedCities] = useState([]);\n  const API_KEY = 'b54245bca7f6ca5f040a750a56381f2f';\n  const searchWeather = (searchQuery, onSuccess) => {\n    // Aggiunto parametro onSuccess\n    if (typeof searchQuery === 'string') {\n      const GEOCODING_API_URL = `http://api.openweathermap.org/geo/1.0/direct?q=${searchQuery}&limit=1&appid=${API_KEY}`;\n      fetch(GEOCODING_API_URL).then(res => res.json()).then(data => {\n        if (data && data.length > 0) {\n          const {\n            lat,\n            lon,\n            name\n          } = data[0];\n          fetchWeatherDetails(name, lat, lon, onSuccess);\n        } else {\n          alert('Città non trovata.');\n        }\n      });\n    } else if (typeof searchQuery === 'object' && searchQuery.latitude && searchQuery.longitude) {\n      const REVERSE_GEOCODING_API_URL = `http://api.openweathermap.org/geo/1.0/reverse?lat=${searchQuery.latitude}&lon=${searchQuery.longitude}&limit=1&appid=${API_KEY}`;\n      fetch(REVERSE_GEOCODING_API_URL).then(res => res.json()).then(data => {\n        if (data && data.length > 0) {\n          const {\n            name\n          } = data[0];\n          fetchWeatherDetails(name, searchQuery.latitude, searchQuery.longitude, onSuccess);\n        } else {\n          fetchWeatherDetails('Posizione sconosciuta', searchQuery.latitude, searchQuery.longitude);\n        }\n      });\n    }\n  };\n  const fetchWeatherDetails = (cityName, lat, lon, onSuccess) => {\n    const WEATHER_API_URL = `http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=it`;\n    fetch(WEATHER_API_URL).then(res => res.json()).then(data => {\n      if (data && data.list) {\n        const current = data.list[0];\n        setCurrentWeather({\n          city: cityName,\n          temp: current.main.temp.toFixed(1),\n          wind: current.wind.speed.toFixed(1),\n          humidity: current.main.humidity,\n          description: current.weather[0].description,\n          icon: current.weather[0].icon,\n          date: current.dt_txt\n        });\n        const dailyForecast = data.list.filter((item, index) => index % 8 === 0).map(item => ({\n          temp: item.main.temp.toFixed(1),\n          wind: item.wind.speed.toFixed(1),\n          humidity: item.main.humidity,\n          description: item.weather[0].description,\n          icon: item.weather[0].icon,\n          date: item.dt_txt\n        }));\n        setForecast(dailyForecast);\n        if (onSuccess) {\n          onSuccess(cityName);\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard Meteo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(WeatherInput, {\n        onSearch: query => searchWeather(query, cityName => {\n          if (!searchedCities.includes(cityName)) {\n            setSearchedCities([...searchedCities, cityName]);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weatherData\",\n        children: [/*#__PURE__*/_jsxDEV(CurrentWeather, {\n          weather: currentWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n          forecast: forecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pSP6LTSdZ0n/xKRnsBxLTwaaLi0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WeatherInput","CurrentWeather","Forecast","jsxDEV","_jsxDEV","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","searchedCities","setSearchedCities","API_KEY","searchWeather","searchQuery","onSuccess","GEOCODING_API_URL","fetch","then","res","json","data","length","lat","lon","name","fetchWeatherDetails","alert","latitude","longitude","REVERSE_GEOCODING_API_URL","cityName","WEATHER_API_URL","list","current","city","temp","main","toFixed","wind","speed","humidity","description","weather","icon","date","dt_txt","dailyForecast","filter","item","index","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","query","includes","_c","$RefreshReg$"],"sources":["/Users/christiantripodi/Documents/Courses/Epicode/Front End/Epicode/s10-esame/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport WeatherInput from './components/WeatherInput';\nimport CurrentWeather from './components/CurrentWeather';\nimport Forecast from './components/Forecast';\nimport './App.css';\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [searchedCities, setSearchedCities] = useState([]);\n\n  const API_KEY = 'b54245bca7f6ca5f040a750a56381f2f';\n\n  const searchWeather = (searchQuery, onSuccess) => {\n    // Aggiunto parametro onSuccess\n    if (typeof searchQuery === 'string') {\n      const GEOCODING_API_URL = `http://api.openweathermap.org/geo/1.0/direct?q=${searchQuery}&limit=1&appid=${API_KEY}`;\n      fetch(GEOCODING_API_URL)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data && data.length > 0) {\n            const { lat, lon, name } = data[0];\n            fetchWeatherDetails(name, lat, lon, onSuccess); \n          } else {\n            alert('Città non trovata.');\n          }\n        });\n    } else if (\n      typeof searchQuery === 'object' &&\n      searchQuery.latitude &&\n      searchQuery.longitude\n    ) {\n      const REVERSE_GEOCODING_API_URL = `http://api.openweathermap.org/geo/1.0/reverse?lat=${searchQuery.latitude}&lon=${searchQuery.longitude}&limit=1&appid=${API_KEY}`;\n      fetch(REVERSE_GEOCODING_API_URL)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data && data.length > 0) {\n            const { name } = data[0];\n            fetchWeatherDetails(\n              name,\n              searchQuery.latitude,\n              searchQuery.longitude,\n              onSuccess\n            ); \n          } else {\n            fetchWeatherDetails(\n              'Posizione sconosciuta',\n              searchQuery.latitude,\n              searchQuery.longitude\n            );\n          }\n        });\n    }\n  };\n\n  const fetchWeatherDetails = (cityName, lat, lon, onSuccess) => {\n  \n    const WEATHER_API_URL = `http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=it`;\n\n    fetch(WEATHER_API_URL)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data && data.list) {\n          const current = data.list[0];\n          setCurrentWeather({\n            city: cityName,\n            temp: current.main.temp.toFixed(1),\n            wind: current.wind.speed.toFixed(1),\n            humidity: current.main.humidity,\n            description: current.weather[0].description,\n            icon: current.weather[0].icon,\n            date: current.dt_txt,\n          });\n\n          const dailyForecast = data.list\n            .filter((item, index) => index % 8 === 0)\n            .map((item) => ({\n              temp: item.main.temp.toFixed(1),\n              wind: item.wind.speed.toFixed(1),\n              humidity: item.main.humidity,\n              description: item.weather[0].description,\n              icon: item.weather[0].icon,\n              date: item.dt_txt,\n            }));\n\n          setForecast(dailyForecast);\n          if (onSuccess) {\n            onSuccess(cityName); \n          }\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dashboard Meteo</h1>\n      <div className=\"container\">\n        <WeatherInput\n          onSearch={(query) =>\n            searchWeather(query, (cityName) => {\n              if (!searchedCities.includes(cityName)) {\n                setSearchedCities([...searchedCities, cityName]); \n              }\n            })\n          }\n        />\n     \n        <div className=\"weatherData\">\n          <CurrentWeather weather={currentWeather} />\n          <Forecast forecast={forecast} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}